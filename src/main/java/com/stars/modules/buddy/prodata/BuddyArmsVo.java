package com.stars.modules.buddy.prodata;import com.stars.core.attr.Attribute;import com.stars.modules.skill.SkillManager;import com.stars.modules.skill.prodata.SkillVo;import com.stars.modules.skill.prodata.SkillvupVo;import com.stars.modules.tool.ToolManager;import com.stars.modules.tool.func.impl.BuddyArmEquipFunc;import com.stars.modules.tool.productdata.ItemVo;import com.stars.network.server.buffer.NewByteBuffer;import com.stars.util.LogUtil;import com.stars.util.StringUtil;import java.util.HashMap;import java.util.Map;/** * Created by liuyuheng on 2016/11/21. */public class BuddyArmsVo {    private int buddyId;// '伙伴id'    private int armLevel;// '武装等级'    private String equip;// '装备,填位置+itemid'    private int reqbuddylv;// '需要等级'    private int reqStageLv;// '需要阶级'    private String skillLevel;// '技能id+技能等级',策划确定非被动技能    private int hp;// '生命'    private int attack;// '攻击'    private int defense;// '防御'    private int hit;// '命中'    private int avoid;// '闪避'    private int crit;// '暴击'    private int anticrit;// '抗暴'    /* 内存数据 */    private Attribute armLevelAttr = new Attribute();// 武装等级属性    private Map<Byte, Integer> equipMap = new HashMap<>();// <装备位置partId, itemId>    private Map<Integer, Integer> skillLevelMap = new HashMap<>();// <skillId, level>    public void writeToBuff(NewByteBuffer buff) {        buff.writeInt(armLevel);        buff.writeInt(reqbuddylv);        buff.writeInt(reqStageLv);        buff.writeString(equip);        byte size = (byte) skillLevelMap.size();        buff.writeByte(size);        if (size != 0) {            for (Map.Entry<Integer, Integer> entry : skillLevelMap.entrySet()) {// <skillId, level>                SkillVo skillVo = SkillManager.getSkillVo(entry.getKey());                if (skillVo == null) {                    continue;                }                buff.writeInt(skillVo.getSkillid());// 技能Id                buff.writeString(skillVo.getName());// 技能名称                buff.writeString(skillVo.getIcon());// 技能图标                buff.writeString(skillVo.getDescrib());// 技能描述                buff.writeInt(entry.getValue());// 技能等级            }        }        buff.writeInt(hp);        buff.writeInt(attack);        buff.writeInt(defense);        buff.writeInt(hit);        buff.writeInt(avoid);        buff.writeInt(crit);        buff.writeInt(anticrit);    }    public Attribute getEquipAttr(byte partId) {        if (!equipMap.containsKey(partId))            return null;        ItemVo itemVo = ToolManager.getItemVo(equipMap.get(partId));        BuddyArmEquipFunc func = (BuddyArmEquipFunc) itemVo.getToolFunc();        return func.getAttribute();    }    public Map<Integer, Integer> getSkillLevelMap() {        return skillLevelMap;    }    public int getEquipItemId(byte partId) {        return equipMap.containsKey(partId) ? equipMap.get(partId) : 0;    }    public Map<Byte, Integer> getEquipMap() {        return equipMap;    }    public int getBuddyId() {        return buddyId;    }    public void setBuddyId(int buddyId) {        this.buddyId = buddyId;    }    public int getArmLevel() {        return armLevel;    }    public void setArmLevel(int armLevel) {        this.armLevel = armLevel;    }    public String getEquip() {        return equip;    }    public void setEquip(String equip) throws Exception {        this.equip = equip;        if (StringUtil.isEmpty(equip) || "0".equals(equip)) {            return;        }        equipMap = StringUtil.toMap(equip, Byte.class, Integer.class, '+', '|');        for (Map.Entry<Byte, Integer> entry : equipMap.entrySet()) {            if (ToolManager.getItemVo(entry.getValue()) == null) {                LogUtil.error("buddyarms表equip字段配置错误,找不到itemid={}的道具", entry.getValue());                throw new IllegalArgumentException();            }        }    }    public int getReqbuddylv() {        return reqbuddylv;    }    public void setReqbuddylv(int reqbuddylv) {        this.reqbuddylv = reqbuddylv;    }        public int getReqStageLv() {        return reqStageLv;    }    public void setReqStageLv(int reqStageLv) {        this.reqStageLv = reqStageLv;    }    public String getSkillLevel() {        return skillLevel;    }    public void setSkillLevel(String skillLevel) throws Exception {        this.skillLevel = skillLevel;        if (StringUtil.isEmpty(skillLevel) || "0".equals(skillLevel)) {            return;        }        skillLevelMap = StringUtil.toMap(skillLevel, Integer.class, Integer.class, '+', '|');        for (Map.Entry<Integer, Integer> entry : skillLevelMap.entrySet()) {            SkillVo skillVo = SkillManager.getSkillVo(entry.getKey());            if (skillVo == null) {                throw new IllegalArgumentException("buddyarms表配置找不到skill产品数据,请检查表skillid=" + entry.getKey());            }            SkillvupVo skillvupVo = SkillManager.getSkillvupVo(entry.getKey(), entry.getValue());            if (skillvupVo == null) {                throw new IllegalArgumentException("buddyarms表配置找不到skilllvup产品数据,请检查表skillid=" + entry.getKey()                        + " level=" + entry.getValue());            }        }    }    public int getHp() {        return hp;    }    public void setHp(int hp) {        this.hp = hp;        if (hp != 0) {            armLevelAttr.setHp(hp);        }    }    public int getAttack() {        return attack;    }    public void setAttack(int attack) {        this.attack = attack;        if (attack != 0) {            armLevelAttr.setAttack(attack);        }    }    public int getDefense() {        return defense;    }    public void setDefense(int defense) {        this.defense = defense;        if (defense != 0) {            armLevelAttr.setDefense(defense);        }    }    public int getHit() {        return hit;    }    public void setHit(int hit) {        this.hit = hit;        if (hit != 0) {            armLevelAttr.setHit(hit);        }    }    public int getAvoid() {        return avoid;    }    public void setAvoid(int avoid) {        this.avoid = avoid;        if (avoid != 0) {            armLevelAttr.setAvoid(avoid);        }    }    public int getCrit() {        return crit;    }    public void setCrit(int crit) {        this.crit = crit;        if (crit != 0) {            armLevelAttr.setCrit(crit);        }    }    public int getAnticrit() {        return anticrit;    }    public void setAnticrit(int anticrit) {        this.anticrit = anticrit;        if (anticrit != 0) {            armLevelAttr.setAnticrit(anticrit);        }    }    public Attribute getArmLevelAttr() {        return armLevelAttr;    }}