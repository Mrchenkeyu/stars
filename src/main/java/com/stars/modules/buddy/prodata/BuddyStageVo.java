package com.stars.modules.buddy.prodata;import com.stars.core.attr.Attribute;import com.stars.modules.scene.SceneManager;import com.stars.modules.scene.prodata.MonsterVo;import com.stars.modules.skill.SkillManager;import com.stars.modules.skill.prodata.SkillVo;import com.stars.network.server.buffer.NewByteBuffer;import com.stars.util.StringUtil;import java.util.HashMap;import java.util.LinkedHashMap;import java.util.Map;/** * Created by liuyuheng on 2016/8/5. */public class BuddyStageVo {    private int buddyId;// '伙伴id'    private int stageLevel;// '阶级'    private int reqBuddyLv;// '需要伙伴等级'    private String reqItem;// '升阶需要材料'    private int monsterId;// '使用怪物id'    private String openSkill;// '开启技能显示' 1+""|1+""|1+""|    private int hp;// '生命'    private int attack;// '攻击'    private int defense;// '防御'    private int hit;// '命中'    private int avoid;// '闪避'    private int crit;// '暴击'    private int anticrit;// '抗暴'    private int scale;// 模型比例(千分比值)    private String openSkillDescribe;// 进阶开启的技能描述    private int sceneScale;// 模型在场景中缩放比例    /* 内存数据 */    private Attribute attribute = new Attribute();// 属性对象    private MonsterVo useMonsterVo;// 使用怪物模型对象    private Map<Integer, Integer> reqItemMap = new HashMap<>();// 升阶消耗    private Map<Integer, String> openSkillIds = new LinkedHashMap<>();// skillId,tag    public void writeToBuff(NewByteBuffer buff) {        buff.writeInt(stageLevel);        buff.writeInt(reqBuddyLv);        buff.writeString(reqItem);        buff.writeString(useMonsterVo.getHeadIcon());        buff.writeString(useMonsterVo.getModel());        buff.writeInt(scale);        buff.writeInt(useMonsterVo.getMoveSpeed());        buff.writeInt(hp);        buff.writeInt(attack);        buff.writeInt(defense);        buff.writeInt(hit);        buff.writeInt(avoid);        buff.writeInt(crit);        buff.writeInt(anticrit);        buff.writeString(openSkillDescribe);        buff.writeByte((byte) openSkillIds.size());        for (Map.Entry<Integer, String> entry : openSkillIds.entrySet()) {// skillId,tag            SkillVo skillVo = SkillManager.getSkillVo(entry.getKey());            if (skillVo == null) {                continue;            }            buff.writeInt(skillVo.getSkillid());            buff.writeString(skillVo.getName());            buff.writeString(skillVo.getIcon());            buff.writeString(skillVo.getDescrib());            buff.writeString(entry.getValue());// tag        }    }    public MonsterVo getUseMonsterVo() {        return useMonsterVo;    }    public Attribute getAttribute() {        return attribute;    }    public Map<Integer, Integer> getReqItemMap() {        return reqItemMap;    }    public int getBuddyId() {        return buddyId;    }    public void setBuddyId(int buddyId) {        this.buddyId = buddyId;    }    public int getStageLevel() {        return stageLevel;    }    public void setStageLevel(int stageLevel) {        this.stageLevel = stageLevel;    }    public int getReqBuddyLv() {        return reqBuddyLv;    }    public void setReqBuddyLv(int reqBuddyLv) {        this.reqBuddyLv = reqBuddyLv;    }    public String getReqItem() {        return reqItem;    }    public void setReqItem(String reqItem) throws Exception {        this.reqItem = reqItem;        if (StringUtil.isEmpty(reqItem) || "0".equals(reqItem)) {            return;        }        reqItemMap = StringUtil.toMap(reqItem, Integer.class, Integer.class, '=', '|');    }    public int getMonsterId() {        return monsterId;    }    public void setMonsterId(int monsterId) {        this.monsterId = monsterId;        MonsterVo monsterVo = SceneManager.getMonsterVo(monsterId);        if (monsterVo == null) {            throw new IllegalArgumentException("buddystage表配置找不到monster产品数据,请检查表monsterid=" + monsterId);        }        this.useMonsterVo = monsterVo;    }    public String getOpenSkill() {        return openSkill;    }    public void setOpenSkill(String openSkill) {        this.openSkill = openSkill;        if (StringUtil.isEmpty(openSkill) || "0".equals(openSkill)) {            return;        }        for (String temp : openSkill.split("\\|")) {            String[] skillIds = temp.split("\\+");            openSkillIds.put(Integer.parseInt(skillIds[0]), skillIds[1]);            SkillVo skillVo = SkillManager.getSkillVo(Integer.parseInt(skillIds[0]));            if (skillVo == null) {                throw new IllegalArgumentException("buddystage表配置找不到skill产品数据,请检查表skillid=" + skillIds[0]);            }        }    }    public int getHp() {        return hp;    }    public void setHp(int hp) {        this.hp = hp;        attribute.setHp(hp);    }    public int getAttack() {        return attack;    }    public void setAttack(int attack) {        this.attack = attack;        attribute.setAttack(attack);    }    public int getDefense() {        return defense;    }    public void setDefense(int defense) {        this.defense = defense;        attribute.setDefense(defense);    }    public int getHit() {        return hit;    }    public void setHit(int hit) {        this.hit = hit;        attribute.setHit(hit);    }    public int getAvoid() {        return avoid;    }    public void setAvoid(int avoid) {        this.avoid = avoid;        attribute.setAvoid(avoid);    }    public int getCrit() {        return crit;    }    public void setCrit(int crit) {        this.crit = crit;        attribute.setCrit(crit);    }    public int getAnticrit() {        return anticrit;    }    public void setAnticrit(int anticrit) {        this.anticrit = anticrit;        attribute.setAnticrit(anticrit);    }    public int getScale() {        return scale;    }    public void setScale(int scale) {        this.scale = scale;    }    public int getSceneScale() {        return sceneScale;    }    public void setSceneScale(int sceneScale) {        this.sceneScale = sceneScale;    }    public String getOpenSkillDescribe() {        return openSkillDescribe;    }    public void setOpenSkillDescribe(String openSkillDescribe) {        this.openSkillDescribe = openSkillDescribe;    }}