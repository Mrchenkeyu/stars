package com.stars.modules.scene.prodata;import com.stars.modules.skill.SkillConstant;import com.stars.network.server.buffer.NewByteBuffer;import com.stars.util.LogUtil;import com.stars.util.StringUtil;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;/** * 怪物产品数据 * 只放最基础的跟模型走的字段 * Created by liuyuheng on 2016/7/5. */public class MonsterVo implements Cloneable {    private int id;//    private String model;//    private String headIcon;// 怪物头像    private int hitSize;//    private String skillOrder;//    private String skill;//    private int moveSpeed;//    private int uiPosition;//    private byte superArmor;//    private int searchRadii;//    private String findEnemyAi;// 寻敌AI    private String pathAi;// 寻路AI    private int attackInterval;// 攻击间隔    private short stopTime;// AI停止时间    private String deathSound;// 死亡音效    private String deadEffect;//死亡特效    private int downSpeed;//下沉速度    private int turnSpeed;//转向速率    private int bornSkill;// 出场技能    private int awakeSkill;// 激活技能    private String relaxAction;// 休闲动作    private byte isTrap;// 标记是否陷阱    private byte isInvincible;// 无敌标记    private String monsDynablock;// 怪物动态阻挡    private String passSkill;//被动技能    private byte type;//0=小怪 1=boss    private short blood;//血条数量    private int scale;//模型缩放    private String bornEffect;    /* 内存数据 */    private Map<Integer, Integer> skillMap = new HashMap<>();// 所有技能<Id,level>(必须把所有技能Id放进这里)    private List<Integer> passSkillList = new ArrayList<Integer>();//存放被动技能    public MonsterVo copy() {        try {            return (MonsterVo) this.clone();        } catch (CloneNotSupportedException e) {            com.stars.util.LogUtil.error("MonsterVo克隆失败", e);            e.printStackTrace();        }        return null;    }    public void writeToBuff(NewByteBuffer buff) {        /*        * monstervo分表        * 1.导客户端lua字段：        * model        * skill        * uiPosition        * headIcon        * deathSound        * deadEffect        * downSpeed        * turnSpeed        * bornSkill        * awakeSkill        * relaxAction        * type        * blood        * scale        *        * 2.在FighterEntity中下发:        * hitSize        * moveSpeed        * */         /* 预加载下发 */        buff.writeInt(id);        buff.writeString(skillOrder);        buff.writeByte(superArmor);        buff.writeInt(searchRadii);        buff.writeString(findEnemyAi);        buff.writeString(pathAi);        buff.writeInt(attackInterval);        buff.writeShort(stopTime);        buff.writeByte(isTrap);        buff.writeByte(isInvincible);        buff.writeString(monsDynablock);        buff.writeString(passSkill);        LogUtil.info("stopTime:{}", stopTime);    }    public Map<Integer, Integer> getSkillMap() {        return skillMap;    }    public List<Integer> getPassSkillList() {        return passSkillList;    }    public int getId() {        return id;    }    public void setId(int id) {        this.id = id;    }    public String getModel() {        return model;    }    public void setModel(String model) {        this.model = model;    }    public int getHitSize() {        return hitSize;    }    public void setHitSize(int hitSize) {        this.hitSize = hitSize;    }    public String getSkillOrder() {        return skillOrder;    }    public void setSkillOrder(String skillOrder) {        this.skillOrder = skillOrder;    }    public String getSkill() {        return skill;    }    public void setSkill(String skill) {        this.skill = skill;        if (StringUtil.isEmpty(skill) || "0".equals(skill)) {            return;        }        String[] strs = skill.split("\\|");        String[] tempStr;        for (int i = 0; i < strs.length; i++) {            tempStr = strs[i].split("\\+");            for (int j = 0; j < tempStr.length; j++) {                if (!"0".equals(tempStr[j])) {                    skillMap.put(Integer.parseInt(tempStr[j]), SkillConstant.MONSTER_SKILL_LEVEL);                }            }        }    }    public int getMoveSpeed() {        return moveSpeed;    }    public void setMoveSpeed(int moveSpeed) {        this.moveSpeed = moveSpeed;    }    public int getUiPosition() {        return uiPosition;    }    public void setUiPosition(int uiPosition) {        this.uiPosition = uiPosition;    }    public byte getSuperArmor() {        return superArmor;    }    public void setSuperArmor(byte superArmor) {        this.superArmor = superArmor;    }    public int getSearchRadii() {        return searchRadii;    }    public void setSearchRadii(int searchRadii) {        this.searchRadii = searchRadii;    }    public int getAttackInterval() {        return attackInterval;    }    public void setAttackInterval(int attackInterval) {        this.attackInterval = attackInterval;    }    public String getPathAi() {        return pathAi;    }    public void setPathAi(String pathAi) {        this.pathAi = pathAi;    }    public String getFindEnemyAi() {        return findEnemyAi;    }    public void setFindEnemyAi(String findEnemyAi) {        this.findEnemyAi = findEnemyAi;    }    public String getHeadIcon() {        return headIcon;    }    public void setHeadIcon(String headIcon) {        this.headIcon = headIcon;    }    public short getStopTime() {        return stopTime;    }    public void setStopTime(short stopTime) {        this.stopTime = stopTime;    }    public String getDeathSound() {        return deathSound;    }    public void setDeathSound(String deathSound) {        this.deathSound = deathSound;    }    public String getDeadEffect() {        return deadEffect;    }    public void setDeadEffect(String deadEffect) {        this.deadEffect = deadEffect;    }    public int getDownSpeed() {        return downSpeed;    }    public void setDownSpeed(int downSpeed) {        this.downSpeed = downSpeed;    }    public int getTurnSpeed() {        return turnSpeed;    }    public void setTurnSpeed(int turnSpeed) {        this.turnSpeed = turnSpeed;    }    public int getBornSkill() {        return bornSkill;    }    public void setBornSkill(int bornSkill) {        this.bornSkill = bornSkill;        if (bornSkill == 0)            return;        skillMap.put(bornSkill, SkillConstant.MONSTER_SKILL_LEVEL);    }    public int getAwakeSkill() {        return awakeSkill;    }    public void setAwakeSkill(int awakeSkill) {        this.awakeSkill = awakeSkill;        if (awakeSkill == 0)            return;        skillMap.put(awakeSkill, SkillConstant.MONSTER_SKILL_LEVEL);    }    public String getRelaxAction() {        return relaxAction;    }    public void setRelaxAction(String relaxAction) {        this.relaxAction = relaxAction;    }    public byte getIsTrap() {        return isTrap;    }    public void setIsTrap(byte isTrap) {        this.isTrap = isTrap;    }    public byte getIsInvincible() {        return isInvincible;    }    public void setIsInvincible(byte isInvincible) {        this.isInvincible = isInvincible;    }    public String getMonsDynablock() {        return monsDynablock;    }    public void setMonsDynablock(String monsDynablock) {        this.monsDynablock = monsDynablock;    }    public String getPassSkill() {        return passSkill;    }    public void setPassSkill(String passSkill) {        this.passSkill = passSkill;        if (StringUtil.isEmpty(passSkill) || "0".equals(passSkill)) {            return;        }        String[] strs = passSkill.split("\\+");        for (int i = 0; i < strs.length; i++) {            if (!"0".equals(strs[i])) {                skillMap.put(Integer.parseInt(strs[i]), SkillConstant.MONSTER_SKILL_LEVEL);                passSkillList.add(Integer.parseInt(strs[i]));            }        }    }    public byte getType() {        return type;    }    public void setType(byte type) {        this.type = type;    }    public int getScale() {        return scale;    }    public void setScale(int scale) {        this.scale = scale;    }    public short getBlood() {        return blood;    }    public void setBlood(short blood) {        this.blood = blood;    }    public String getBornEffect() {        return bornEffect;    }    public void setBornEffect(String bornEffect) {        this.bornEffect = bornEffect;    }}