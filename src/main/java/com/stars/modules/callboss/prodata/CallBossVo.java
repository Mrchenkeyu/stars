package com.stars.modules.callboss.prodata;import com.stars.modules.scene.SceneManager;import com.stars.modules.scene.prodata.MonsterAttributeVo;import com.stars.network.server.buffer.NewByteBuffer;import com.stars.util.StringUtil;import java.util.*;/** * Created by liuyuheng on 2016/9/5. */public class CallBossVo {    private int bossId;// 'bossid'    private int stageId;// '场景id'    private String name;// '名称'    private String desc;// '描述'    private int stageMonsterId;// '使用怪物属性id'    private String week;// '可被召唤的日期'    private String cost;// '召唤消耗'    private int levelLimit;// '召唤需要角色等级'    private String rankReward;// '排名奖励'    private String specialReward;// '召唤可获得奖励'    private String selectReward;// '召唤可选奖励'    private int cdTime;// '召唤boss冷却时间'    private int liveTime;// 'boss存活时间'    private String showItem;// '显示排名奖励'    private String rankDisplay;// '排行榜名称对应特殊图片'    private String callTimeDesc;// '召唤时间描述'    private String bodyImg;// '半身像图片'    /* 内存数据 */    private List<Integer> weekDayList = new LinkedList<>();// 可被召唤日期(星期1~7)    private Map<Integer, Integer> costMap = new HashMap<>();// 召唤消耗    private Map<int[], Map<Integer, Integer>> rankRewardMap = new LinkedHashMap<>();// 排行奖励,<排名段,<itemId,number>>    private Map<Integer, Integer> callReward = new HashMap<>();// 召唤者奖励    private Map<Byte, Map<Integer, Integer>> selectRewardMap = new HashMap<>();// 可选奖励组,<奖励组id,<itemId,number>>    private int rankDisplayRow;// 排行榜显示行数    private long cdTimeMs;// 冷却时间ms    private long liveTimeMs;// 存活时间ms    public void writeToBuff(NewByteBuffer buff) {        buff.writeInt(bossId);        buff.writeString(name);        buff.writeString(desc);        buff.writeString(week);        buff.writeString(cost);        buff.writeInt(levelLimit);        buff.writeString(specialReward);        buff.writeString(selectReward);        buff.writeInt(liveTime);        buff.writeInt(cdTime);        buff.writeString(showItem);        buff.writeString(rankDisplay);        buff.writeString(callTimeDesc);        MonsterAttributeVo monsterAttrVo = SceneManager.getMonsterAttrVo(stageMonsterId);        buff.writeInt(monsterAttrVo.getMonsterId());// 使用怪物模型id        buff.writeString(bodyImg);    }    public int getRankDisplayRow() {        return rankDisplayRow;    }    public List<Integer> getWeekDayList() {        return weekDayList;    }    public Map<Integer, Integer> getCostMap() {        return costMap;    }    public Map<int[], Map<Integer, Integer>> getRankRewardMap() {        return rankRewardMap;    }    public Map<Integer, Integer> getCallReward() {        return callReward;    }    public Map<Byte, Map<Integer, Integer>> getSelectRewardMap() {        return selectRewardMap;    }    public int getBossId() {        return bossId;    }    public void setBossId(int bossId) {        this.bossId = bossId;    }    public int getStageId() {        return stageId;    }    public void setStageId(int stageId) {        this.stageId = stageId;        if (stageId == 0)            throw new IllegalArgumentException("callboss表stageId字段配置错误");        if (!SceneManager.stageVoMap.containsKey(stageId))            throw new IllegalArgumentException("找不到战斗场景配置stageId=" + stageId);    }    public String getName() {        return name;    }    public void setName(String name) {        this.name = name;    }    public String getDesc() {        return desc;    }    public void setDesc(String desc) {        this.desc = desc;    }    public int getStageMonsterId() {        return stageMonsterId;    }    public void setStageMonsterId(int stageMonsterId) {        this.stageMonsterId = stageMonsterId;        if (stageMonsterId == 0) {            return;        }        if (!SceneManager.monsterAttributeVoMap.containsKey(stageMonsterId))            throw new IllegalArgumentException("找不到怪物属性配置stageMonsterId=" + stageMonsterId);    }    public String getWeek() {        return week;    }    public void setWeek(String week) throws Exception {        this.week = week;        if (StringUtil.isEmpty(week) || "0".equals(week)) {            return;        }//        weekDayList = StringUtil.parseArrayIntList(week, "\\+");        weekDayList = StringUtil.toArrayList(week, Integer.class, '+');    }    public String getCost() {        return cost;    }    public void setCost(String cost) throws Exception {        this.cost = cost;        if (StringUtil.isEmpty(cost) || "0".equals(cost)) {            return;        }        cost = cost.replace("+", "=");//        costMap = StringUtil.parseIntegerMap(cost, "\\|", HashMap.class);        costMap = StringUtil.toMap(cost, Integer.class, Integer.class, '=', '|');    }    public int getLevelLimit() {        return levelLimit;    }    public void setLevelLimit(int levelLimit) {        this.levelLimit = levelLimit;    }    public String getRankReward() {        return rankReward;    }    public void setRankReward(String rankReward) throws Exception {        this.rankReward = rankReward;        if (StringUtil.isEmpty(rankReward) || "0".equals(rankReward)) {            return;        }        Map<int[], Map<Integer, Integer>> map = new HashMap<>();        for (String str : rankReward.split("\\|")) {            String[] temp = str.split(",");//            int[] rankLimit = StringUtil.parseIntList(temp[0], "\\+");            int[] rankLimit = StringUtil.toArray(temp[0], int[].class, '+');            if (rankLimit[0] > rankLimit[1])                throw new IllegalArgumentException("callboss表rankreward字段配置错误");            for (int i = 1; i < temp.length; i++) {//                Map<Integer, Integer> reward = StringUtil.parseStrToMap(temp[i], "\\+", HashMap.class);                Map<Integer, Integer> reward = StringUtil.toMap(temp[i], Integer.class, Integer.class, '+', '|');                if (!map.containsKey(rankLimit))                    map.put(rankLimit, new HashMap<Integer, Integer>());                map.get(rankLimit).putAll(reward);            }        }        rankRewardMap = map;    }    public String getSpecialReward() {        return specialReward;    }    public void setSpecialReward(String specialReward) throws Exception {        this.specialReward = specialReward;        if (StringUtil.isEmpty(specialReward) || "0".equals(specialReward)) {            return;        }        specialReward = specialReward.replace("+", "=");//        callReward = StringUtil.parseIntegerMap(specialReward, "\\|", HashMap.class);        callReward = StringUtil.toMap(specialReward, Integer.class, Integer.class, '=', '|');    }    public String getSelectReward() {        return selectReward;    }    public void setSelectReward(String selectReward) throws Exception {        this.selectReward = selectReward;        if (StringUtil.isEmpty(selectReward) || "0".equals(selectReward)) {            return;        }        Map<Byte, Map<Integer, Integer>> map = new HashMap<>();        byte seqUId = 1;        for (String temp : selectReward.split("\\|")) {//            map.put(seqUId, StringUtil.parseStrToMap(temp, "\\+", HashMap.class));            map.put(seqUId, StringUtil.toMap(temp, Integer.class, Integer.class, '+', '|'));            seqUId++;        }        selectRewardMap = map;    }    public int getCdTime() {        return cdTime;    }    public void setCdTime(int cdTime) {        this.cdTime = cdTime;        this.cdTimeMs = cdTime * 1000L;    }    public int getLiveTime() {        return liveTime;    }    public void setLiveTime(int liveTime) {        this.liveTime = liveTime;        this.liveTimeMs = liveTime * 1000L;    }    public String getShowItem() {        return showItem;    }    public void setShowItem(String showItem) {        this.showItem = showItem;    }    public String getRankDisplay() {        return rankDisplay;    }    public void setRankDisplay(String rankDisplay) {        this.rankDisplay = rankDisplay;        if (StringUtil.isEmpty(rankDisplay) || "0".equals(rankDisplay))            return;        this.rankDisplayRow = Integer.parseInt(rankDisplay.split("\\|")[0]);    }    public String getCallTimeDesc() {        return callTimeDesc;    }    public void setCallTimeDesc(String callTimeDesc) {        this.callTimeDesc = callTimeDesc;    }    public String getBodyImg() {        return bodyImg;    }    public void setBodyImg(String bodyImg) {        this.bodyImg = bodyImg;    }    public long getCdTimeMs() {        return cdTimeMs;    }    public long getLiveTimeMs() {        return liveTimeMs;    }}